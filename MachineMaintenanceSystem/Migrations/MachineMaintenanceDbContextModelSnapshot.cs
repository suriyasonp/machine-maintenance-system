// <auto-generated />
using System;
using MachineMaintenanceSystem.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MachineMaintenanceSystem.Api.Migrations
{
    [DbContext(typeof(MachineMaintenanceDbContext))]
    partial class MachineMaintenanceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MachineMaintenanceSystem.Api.Models.v1.DowntimeRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTimeOffset?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid?>("RelatedMaintenanceRecordId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("RelatedMaintenanceRecordId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("DowntimeRecords");
                });

            modelBuilder.Entity("MachineMaintenanceSystem.Api.Models.v1.Equipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTimeOffset>("InstallationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LastMaintenanceDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("SerialNumber");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("MachineMaintenanceSystem.Api.Models.v1.MaintenanceRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Cost")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTimeOffset?>("EndMaintenanceAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEmergency")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("MaintenanceDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTimeOffset?>("StartMaintenanceAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TechnicianId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("MaintenanceDate");

                    b.HasIndex("TechnicianId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("MaintenanceRecords");
                });

            modelBuilder.Entity("MachineMaintenanceSystem.Api.Models.v1.MaintenanceSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("EstimatedDuration")
                        .HasColumnType("interval");

                    b.Property<int>("Frequency")
                        .HasColumnType("integer");

                    b.Property<int>("FrequencyValue")
                        .HasColumnType("integer");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("NextDueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("NextDueDate");

                    b.HasIndex("UpdatedById");

                    b.ToTable("MaintenanceSchedules");
                });

            modelBuilder.Entity("MachineMaintenanceSystem.Api.Models.v1.Part", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("MinimumStockLevel")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PartNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("integer");

                    b.Property<string>("Supplier")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PartNumber");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("MachineMaintenanceSystem.Api.Models.v1.PartUsage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaintenanceRecordId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PartId")
                        .HasColumnType("uuid");

                    b.Property<int>("QuantityUsed")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("MaintenanceRecordId");

                    b.HasIndex("PartId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("PartUsages");
                });

            modelBuilder.Entity("MachineMaintenanceSystem.Api.Models.v1.SystemUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SystemUser");
                });

            modelBuilder.Entity("MachineMaintenanceSystem.Api.Models.v1.Technician", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Certifications")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("Specialty")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Technicians");
                });

            modelBuilder.Entity("MachineMaintenanceSystem.Api.Models.v1.DowntimeRecord", b =>
                {
                    b.HasOne("MachineMaintenanceSystem.Api.Models.v1.SystemUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("MachineMaintenanceSystem.Api.Models.v1.Equipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MachineMaintenanceSystem.Api.Models.v1.MaintenanceRecord", "RelatedMaintenanceRecord")
                        .WithMany()
                        .HasForeignKey("RelatedMaintenanceRecordId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MachineMaintenanceSystem.Api.Models.v1.SystemUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("Equipment");

                    b.Navigation("RelatedMaintenanceRecord");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("MachineMaintenanceSystem.Api.Models.v1.Equipment", b =>
                {
                    b.HasOne("MachineMaintenanceSystem.Api.Models.v1.SystemUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("MachineMaintenanceSystem.Api.Models.v1.SystemUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("MachineMaintenanceSystem.Api.Models.v1.MaintenanceRecord", b =>
                {
                    b.HasOne("MachineMaintenanceSystem.Api.Models.v1.SystemUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("MachineMaintenanceSystem.Api.Models.v1.Equipment", "Equipment")
                        .WithMany("MaintenanceRecords")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MachineMaintenanceSystem.Api.Models.v1.Technician", "Technician")
                        .WithMany("MaintenanceRecords")
                        .HasForeignKey("TechnicianId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MachineMaintenanceSystem.Api.Models.v1.SystemUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("Equipment");

                    b.Navigation("Technician");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("MachineMaintenanceSystem.Api.Models.v1.MaintenanceSchedule", b =>
                {
                    b.HasOne("MachineMaintenanceSystem.Api.Models.v1.SystemUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("MachineMaintenanceSystem.Api.Models.v1.Equipment", "Equipment")
                        .WithMany("MaintenanceSchedules")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MachineMaintenanceSystem.Api.Models.v1.SystemUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("Equipment");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("MachineMaintenanceSystem.Api.Models.v1.Part", b =>
                {
                    b.HasOne("MachineMaintenanceSystem.Api.Models.v1.SystemUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("MachineMaintenanceSystem.Api.Models.v1.SystemUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("MachineMaintenanceSystem.Api.Models.v1.PartUsage", b =>
                {
                    b.HasOne("MachineMaintenanceSystem.Api.Models.v1.SystemUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("MachineMaintenanceSystem.Api.Models.v1.MaintenanceRecord", "MaintenanceRecord")
                        .WithMany("PartsUsed")
                        .HasForeignKey("MaintenanceRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MachineMaintenanceSystem.Api.Models.v1.Part", "Part")
                        .WithMany("UsageRecords")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MachineMaintenanceSystem.Api.Models.v1.SystemUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("MaintenanceRecord");

                    b.Navigation("Part");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("MachineMaintenanceSystem.Api.Models.v1.Technician", b =>
                {
                    b.HasOne("MachineMaintenanceSystem.Api.Models.v1.SystemUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("MachineMaintenanceSystem.Api.Models.v1.SystemUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("MachineMaintenanceSystem.Api.Models.v1.Equipment", b =>
                {
                    b.Navigation("MaintenanceRecords");

                    b.Navigation("MaintenanceSchedules");
                });

            modelBuilder.Entity("MachineMaintenanceSystem.Api.Models.v1.MaintenanceRecord", b =>
                {
                    b.Navigation("PartsUsed");
                });

            modelBuilder.Entity("MachineMaintenanceSystem.Api.Models.v1.Part", b =>
                {
                    b.Navigation("UsageRecords");
                });

            modelBuilder.Entity("MachineMaintenanceSystem.Api.Models.v1.Technician", b =>
                {
                    b.Navigation("MaintenanceRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
